setwd("~/GitHub/GD-BMP/experiments/IISBMP1/scripts")
# Load functions
source('functions.R')
# Load packages
source('packages.R')
# Load data
source('load.R')
# Subsetting to get rid of missing values
source('subset.R')
# Clean data
source('clean.R')
# Export raw data
source('export.R')
# Calculation of water detection limits
source('water_detect_lim.R')
# Calculate leakage from biogas bottles
which(is.na(biogas$mass.init))
which(is.na(biogas$mass.final))
biogas.leak <- biogas[!is.na(biogas$mass.init) & !is.na(biogas$mass.final), ]
leaks <- massLoss(biogas.leak,
time.name = 'elapsed.time',
m.pre.name = 'mass.init', m.post.name = 'mass.final',
id.name = 'id.exper')
id.descrip <- setup[, c('id.exper', 'descrip')]
leaks <- merge(leaks, id.descrip, by = 'id.exper')
leaks <- leaks[ , c( 'id.exper', 'exper', 'descrip', 'elapsed.time', 'mass.tot', 'mass.vent', 'mass.leak', "cmass.tot", "cmass.vent", "cmass.leak") ]
biogas <- merge(biogas, leaks, by = c('id.exper', 'exper', 'elapsed.time'))
leaks1 <- leaks[leaks$exper == 1, ]
leaks2 <- leaks[leaks$exper == 2, ]
# Make a subset where samples with high leak is removed
large.leaks <- subset(filter(leaks, cmass.leak > detect.lim.tot))
no.leaks <- subset(filter(leaks, cmass.leak < detect.lim.tot))
large.leaks.int <- subset(filter(leaks, mass.leak > detect.lim.int))
no.leaks.int <- subset(filter(leaks, mass.leak < detect.lim.int))
# Exper 2
large.leaks2 <- subset(filter(leaks2, cmass.leak > detect.lim.tot2))
no.leaks2 <- subset(filter(leaks2, cmass.leak < detect.lim.tot2))
large.leaks.int2 <- subset(filter(leaks1, mass.leak > detect.lim.int1))
no.leaks.int2 <- subset(filter(leaks1, mass.leak < detect.lim.int1))
# Merge for data frame exper 2 without leaks
id.descrip <- setup[, c('id.exper', 'descrip')]
no.leaks <- merge(no.leaks, id.descrip, by = "descrip", 'id.exper')
no.leaks2.1 <- no.leaks2[ , c( 'id.exper', 'exper', 'descrip', 'elapsed.time') ]
no.leaks2.biogas <- merge(biogas, no.leaks2.1, by = c('id.exper', 'descrip', 'exper', 'elapsed.time'))
# Plots
# Plot leaks
jpeg('../plots/cumleaks.png')
par(mfrow = c(1,1))
plot(leaks2$elapsed.time,
leaks$cmass.leak)
plot(leaks2$elapsed.time,
leaks2$cmass.leak)
abline(0, 0)
abline(detect.lim.tot, 0)
dev.off()
View(biogas)
View(biogas.leak)
plot(leaks2$elapsed.time,
leaks2$cmass.leak, color = "red")
plot(leaks2$elapsed.time,
leaks2$cmass.leak)
# Plots
# Plot leaks
jpeg('../plots/cumleaks.png')
par(mfrow = c(1,1))
plot(leaks2$elapsed.time,
leaks2$cmass.leak)
abline(0, 0)
abline(detect.lim.tot, 0)
dev.off()
abline(0, 0, col = 'red')
abline(detect.lim.tot, 0, col = 'red')
# Plots
# Plot leaks
jpeg('../plots/cumleaks.png')
par(mfrow = c(1,1))
plot(leaks2$elapsed.time,
leaks2$cmass.leak)
abline(0, 0)
abline(detect.lim.tot, 0, col = 'red')
dev.off()
plot(leaks2$elapsed.time,
leaks2$cmass.leak, xlab = "Time [D]")
plot(leaks2$elapsed.time,
leaks2$cmass.leak, xlab = "Time [D]", ylab = "Cumulatie mass loss [g]")
# Plots
# Plot leaks
jpeg('../plots/cumleaks.png')
par(mfrow = c(1,1))
plot(leaks2$elapsed.time,
leaks2$cmass.leak, xlab = "Time [D]", ylab = "Cumulatie mass loss [g]")
abline(0, 0)
abline(detect.lim.tot, 0, col = 'red')
dev.off()
setwd("~/GitHub/GD-BMP/experiments/IISBMP2/scripts")
# Load functions
source('functions.R')
# Load packages
source('packages.R')
# Load data
source('load.R')
# Clean data
source('clean.R')
# Calculation of water detection limits and drift
source('water_detect_lim.R')
source('drift_correction.R')
# Calculate leakage from biogas bottles
source('leak.R')
abline(detect.lim.tot, 0, col = "red")
jpeg('../plots/cumleaks.png')
par(mfrow = c(1,1))
plot(leaks$elapsed.time,
leaks$cmass.leak,
xlab = "Time [D]", ylab = "Cumulatie mass loss [g]")
abline(0, 0)
abline(detect.lim.tot, 0, col = "red")
dev.off()
setwd("~/GitHub/GD-BMP/experiments/thermal hydrolysis/scripts")
# Load functions
source('functions.R')
# Load packages
source('packages.R')
# Load data
source('load.R')
# Clean data
source('clean.R')
# Calculation of water detection limits
source('water_detect_lim.R')
# Calculate leakage from biogas bottles
source('leak.R')
which(is.na(biogas$mass.init))
which(is.na(biogas$mass.final))
leaks <- massLoss(biogas,
time.name = 'elapsed.time',
m.pre.name = 'mass.init', m.post.name = 'mass.final',
id.name = 'id')
id.descrip <- setup[, c('id', 'descrip')]
leaks <- merge(leaks, id.descrip, by = 'id', all.x = TRUE)
leaks <- leaks[ , c('id', 'descrip', 'date', 'elapsed.time', 'mass.tot', 'mass.vent', 'mass.leak', "cmass.tot", "cmass.vent", "cmass.leak") ]
biogas <- merge(biogas, leaks, by = c('id', 'date', 'elapsed.time'), all.x = TRUE)
abline(detect.lim.tot, 0,col = "red")
# Plot leaks
jpeg('../plots/cumleaks.png')
par(mfrow = c(1,1))
plot(leaks$elapsed.time,
leaks$cmass.leak,
xlab = "Time [D]", ylab = "Cumulatie mass loss [g]")
abline(0, 0)
abline(detect.lim.tot, 0,col = "red")
dev.off()
setwd("~/GitHub/GD-BMP/experiments/UQ2/gd/scripts")
# Load functions
source('functions.R')
# Load packages
source('packages.R')
# Load data
source('load.R')
# Clean data
source('clean.R')
# Export raw data
source('export.R')
# Calculation of water detection limits
source('water_detect_lim.R')
# Calculate leakage from biogas bottles
source('leak.R')
abline(detect.lim.int, 0, col = "red")
png('../plots/leaks.png')
plot(leaks$elapsed.time,
leaks$mass.leak,  xlab = "Time [D]", ylab = "Cumulatie mass loss [g]")
abline(detect.lim.int, 0, col = "red")
dev.off()
jpeg('../plots/cumleaks.png')
par(mfrow = c(1,1))
plot(leaks$elapsed.time,
leaks$cmass.leak,
xlab = "Time [D]", ylab = "Cumulatie mass loss [g]")
abline(0, 0)
abline(detect.lim.tot, 0, col = "red")
dev.off()
setwd("~/GitHub/GD-BMP/experiments/UQ2/man.grav/scripts")
# Runs complete analysis of UQ2 data (man_grav)
# Camilla G. Justesen
# Load functions
source('functions.R')
# Load packages
source('packages.R')
# Load data
source('load.R')
# Clean data
source('clean.R')
# Export raw data
source('export.R')
# Calculation of water detection limits
source('water_detect_lim.R')
# Calculate leakage from biogas bottles
source('leak.R')
# Plot leaks
jpeg('../plots/cumleaks.png')
par(mfrow = c(1,1))
plot(leaks$elapsed.time,
leaks$cmass.leak,
xlab = "Time [D]", ylab = "Cumulatie mass loss [g]")
abline(0, 0)
abline(detect.lim.tot, 0, col = "red")
dev.off()
